{"version":3,"sources":["serviceWorker.js","API.js","index.js"],"names":["Boolean","window","location","hostname","match","a","url","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","json","postData","then","data","ReactDOM","render","src","hdurl","get_image","document","getElementById","console","log","NasaImage","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCXN,WAAoB,4CAChB,0CAAAC,EAAA,6DAAwBC,EAAxB,+BAA8B,GAA9B,SAE2BC,MAAMD,EAAK,CAChCE,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,gBAZtB,cAEUC,EAFV,yBAcWA,EAASC,QAdpB,4CADgB,uBAAC,WAAD,gCAkBdC,CAAS,wFACNC,MAAK,SAACC,GAEL,OADAC,IAASC,OAxBnB,SAAmBF,GACf,OAAO,yBAAKG,IAAKH,EAAKI,QAuBAC,CAAUL,GAAMM,SAASC,eAAe,SACjDC,QAAQC,IAAIT,OC6C3BU,GF0DI,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAMC,a","file":"static/js/main.b0818588.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom'\nimport React from 'react'\n\nfunction get_image(data){\n    return <img src={data.hdurl}/>\n}\n\nfunction NasaImage(){\n    async function postData(url = '') {\n        // Default options are marked with *\n        const response = await fetch(url, {\n          method: 'GET', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          redirect: 'follow', // manual, *follow, error\n          referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n      }\n      \n      postData('https://api.nasa.gov/planetary/apod?api_key=EAmqtcqUCvvmbNxmLCGBsZGKU2NKmYmA5q49ieKQ')\n        .then((data) => {\n          ReactDOM.render(get_image(data),document.getElementById('nasa'));\n          return console.log(data);\n        });\n}\n\nexport default NasaImage;","import React, { useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport NasaImage from './API'\nimport App from './App'\n/*\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n    document.getElementById('root')\n);\n*/\n\n/*const persona = {\n  firstName: 'Giuseppe',\n  lastName: 'D Ambrosio',\n  mail: 'dambrosio.giuseppe09@gmail.com',\n  age: 19,\n  city: 'Eboli',\n  avatar: 'test.png'\n};\n\nfunction tick(){\n  const element = (\n    <div>\n      <p>Es ist {new Date().toLocaleTimeString('en-GB')} Uhr.</p>\n    </div>\n  );\n  ReactDOM.render(element, document.getElementById('time'));\n}\nsetInterval(tick, 1000);\n\nfunction bio_title(persona){\n  return <h1 className='fuckyou'>{persona.lastName} {persona.firstName}</h1>\n}\nfunction bio_title(persona){\n  return <h1 className='fuckyou'>{persona.lastName} {persona.firstName}</h1>\n}\n\n    console.log('The link was clicked.');\n  }\n  return(\n    <a href=\"#\" onClick={handleClick}>{getImage()}</a>\n  );\n}\n\nfunction getImage(){\n  return <img id='avatar' src={persona.avatar} width='200'/>\n}\n\nfetch('https://api.nasa.gov/planetary/apod?api_key=EAmqtcqUCvvmbNxmLCGBsZGKU2NKmYmA5q49ieKQ')\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    console.log(data.hdurl);\n  });\n\nfunction Show_bio(){\n  return(\n    <div>\n       {bio_title(persona)}\n       <Event/>\n       <p>Et√†: {persona.age}</p>\n    </div>\n  );\n}\n\nReactDOM.render(Show_bio(), document.getElementById('bio'));\n*/\n\n  NasaImage()\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}